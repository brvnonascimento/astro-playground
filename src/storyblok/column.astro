---
import { renderRichText } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import { ColumnStoryblok } from "@types";
import { resolveColumnStylesBlocks } from "storyblok/styles/resolveStyles";

const { blok } = Astro.props;

type Props = {
  blok: ColumnStoryblok;
};

const extractImgTag = (htmlString: string): string => {
  const regex = /<([^>]+)>(\s*<img[^>]*>\s*)(.*?)<\/\1>/g;
  return htmlString.replace(regex, "$2<$1>$3</$1>");
};

const removeEmptyTags = (htmlString: string): string => {
  const regex = /<([^\s>]+)(\s[^>]*)?>\s*<\/\1>/g;
  return htmlString.replace(regex, "");
};

const { classNames, cssVariables } = resolveColumnStylesBlocks(blok?.styles);
---

<style define:vars={cssVariables}>
  .column {
    /* aspect-ratio: 9 / 16; */

    :global(img) {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    &.escapeContainer {
      grid-column: span 2;

      &:first-child {
        grid-column: 1 / span 2;
      }
    }

    @media (min-width: 768px) {
      &.tablet-escapeContainer {
        grid-column: span 2;

        &:first-child {
          grid-column: 1 / span 2;
        }
      }
    }

    @media (min-width: 1024px) {
      &.desktop-escapeContainer {
        grid-column: span 2;

        &:first-child {
          grid-column: 1 / span 2;
        }
      }
    }
  }
</style>

<!-- Column -->
<div class:list={["column", classNames]}>
  {
    blok?.content?.content.map((block, i) => {
      if (block.type === "blok") {
        return block?.attrs?.body?.map((childBlock) => {
          return <StoryblokComponent blok={childBlock} />;
        });
      }

      const renderedRichText = removeEmptyTags(
        // @ts-expect-error this workaround works for now
        extractImgTag(renderRichText({ content: [block] }))
      );

      return <Fragment set:html={renderedRichText} />;
    })
  }
</div>
<!--  -->
