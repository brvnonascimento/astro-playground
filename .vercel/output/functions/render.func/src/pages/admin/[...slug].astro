---
import { useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";

export const getStaticPaths = async () => {
  const storyblokApi = useStoryblokApi();

  const { data } = await storyblokApi.get("cdn/links", {
    version: import.meta.env.DEV ? "draft" : "published",
  });

  const links = Object.values(data.links);

  return links.map((link) => {
    return {
      params: { slug: link.slug === "home" ? undefined : link.slug },
    };
  });
};

const { slug = "home" } = Astro.params;

const storyblokApi = useStoryblokApi();

const { data } = await storyblokApi.get(`cdn/stories/${slug}`, {
  version: import.meta.env.DEV ? "draft" : "published",
});

const story = data.story;
---

<!-- <script>
  import { storyblokInit, apiPlugin, useStoryblokBridge } from "@storyblok/js";

  const astroPreview = document.querySelector<HTMLDivElement>("astro-preview");

  if (!astroPreview) {
    throw new Error("astro-preview not found");
  }

  const accessToken = astroPreview.dataset.accessToken;
  const slug = astroPreview.dataset.slug;

  const { storyblokApi } = storyblokInit({
    accessToken: accessToken,
    use: [apiPlugin],
    // if you are using a space located in US region, use apiOptions.region:
    apiOptions: {
      region: "us", // region code here
    },
  });

  const { data } = await storyblokApi.get(`cdn/stories/${slug ?? "home"}`, {
    version: "draft",
  });

  useStoryblokBridge(data.story.id, console.log);
</script> -->
<astro-preview
  data-access-token={import.meta.env.PUBLIC_STORYBLOK_ACCESS_TOKEN}
  data-slug={slug}>
  <StoryblokComponent blok={story.content} />
</astro-preview>
