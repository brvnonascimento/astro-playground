---
import { storyblokEditable } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import { PageSectionStoryblok } from "@types";
import { resolvePageSectionStylesBlocks } from "storyblok/styles/resolveStyles";

export type Props = {
  blok: PageSectionStoryblok;
};

const { blok } = Astro.props;

const styles = blok?.styles;

const { classNames, cssVariables } = resolvePageSectionStylesBlocks(styles);

const sectionClassList = ["pageSection", classNames];
---

<style define:vars={cssVariables}>
  .pageSection {
    /* min-height: var(--available-page-height); */
    position: relative;
  }

  .pageSectionGrid {
    --number-of-columns: var(--numberOfColumnsOnMobile);
    --number-of-columns: var(--numberOfColumnsOnMobile);
    --column-gap: var(--columnGapOnMobile);
    --row-gap: var(--rowGapOnMobile);

    display: subgrid;
    container-type: inline-size;
    grid-template-columns:
      1fr repeat(
        var(--number-of-columns),
        calc(min(95%, 1920px) / var(--number-of-columns))
      )
      1fr;
    row-gap: var(--row-gap);
    column-gap: var(--column-gap);
    margin-left: calc(var(--column-gap) / 2);

    :global(.column:first-child) {
      grid-column: 2;
    }

    /* Align Left */
    &.alignTopLeft {
      align-items: start;
      justify-items: start;
    }

    &.alignLeft {
      align-items: center;
      justify-items: start;
    }

    &.alignBottomLeft {
      align-items: end;
      justify-items: start;
    }
    /*  */

    /* Align Center */
    &.alignTopCenter {
      align-items: start;
      justify-items: center;
    }

    &.alignCenter {
      align-items: center;
      justify-items: center;
    }

    &.alignBottomCenter {
      align-items: end;
      justify-items: center;
    }
    /*  */

    /* Align Right */
    &.alignTopRight {
      align-items: start;
      justify-items: end;
    }

    &.alignRight {
      align-items: center;
      justify-items: end;
    }

    &.alignBottomRight {
      align-items: end;
      justify-items: end;
    }

    @media (max-width: 768px) {
      &[data-number-of-columns-on-mobile="1"] {
        :global(.column) {
          grid-column: 2;
        }
      }
    }

    @media (min-width: 768px) {
      --number-of-columns: var(
        --numberOfColumnsOnTablet,
        var(--numberOfColumnsOnMobile)
      );
      --column-gap: var(--columnGapOnTablet, var(--columnGapOnMobile));
      --row-gap: var(--rowGapOnTablet, var(--rowGapOnMobile));

      /* Align Left */
      &.tablet-alignTopLeft {
        justify-items: start;
        align-items: start;
      }

      &.tablet-alignLeft {
        justify-items: start;
        align-items: center;
      }

      &.tablet-alignBottomLeft {
        justify-items: start;
        align-items: end;
      }
      /*  */

      /* Align Center */
      &.tablet-alignTopCenter {
        justify-items: center;
        align-items: start;
      }

      &.tablet-alignCenter {
        justify-items: center;
        align-items: center;
      }

      &.tablet-alignBottomCenter {
        justify-items: center;
        align-items: end;
      }
      /*  */

      /* Align Right */
      &.tablet-alignTopRight {
        justify-items: end;
        align-items: start;
      }

      &.tablet-alignRight {
        justify-items: end;
        align-items: center;
      }

      &.tablet-alignBottomRight {
        justify-items: end;
        align-items: end;
      }
      /*  */

      &.columnGap-tablet {
        --column-gap: var(--columnGapOnTablet);
      }
    }

    @media (max-width: 1024px) {
      &[data-number-of-columns-on-tablet="1"] {
        :global(.column) {
          grid-column: 2;
        }
      }
    }

    @media (min-width: 1024px) {
      --number-of-columns: var(
        --numberOfColumnsOnDesktop,
        var(--numberOfColumnsOnTablet)
      );
      --column-gap: var(--columnGapOnDesktop, var(--columnGapOnTablet));
      --row-gap: var(--rowGapOnDesktop, var(--rowGapOnTablet));

      /* Align Left */
      &.desktop-alignTopLeft {
        align-items: start;
        justify-items: start;
      }

      &.desktop-alignLeft {
        align-items: center;
        justify-items: start;
      }

      &.desktop-alignBottomLeft {
        align-items: end;
        justify-items: start;
      }
      /*  */

      /* Align Center */
      &.desktop-alignTopCenter {
        align-items: start;
        justify-items: center;
      }

      &.desktop-alignCenter {
        align-items: center;
        justify-items: center;
      }

      &.desktop-alignBottomCenter {
        align-items: end;
        justify-items: center;
      }
      /*  */

      /* Align Right */
      &.desktop-alignTopRight {
        align-items: start;
        justify-items: end;
      }

      &.desktop-alignRight {
        align-items: center;
        justify-items: end;
      }

      &.desktop-alignBottomRight {
        align-items: end;
        justify-items: end;
      }

      &[data-number-of-columns-on-desktop="1"] {
        :global(.column) {
          grid-column: 2;
        }
      }

      &.columnGap-desktop {
        --column-gap: var(--columnGapOnDesktop);
      }
    }
  }
  /*  */
</style>

<!-- Page Section -->
<section
  class:list={sectionClassList}
  data-number-of-columns-on-mobile={cssVariables.numberOfColumnsOnMobile}
  data-number-of-columns-on-tablet={cssVariables.numberOfColumnsOnTablet}
  data-number-of-columns-on-desktop={cssVariables.numberOfColumnsOnDesktop}
  {...storyblokEditable(blok)}>
  {blok.columns?.map((column) => <StoryblokComponent blok={column} />)}
</section>
<!--  -->
